cmake_minimum_required(VERSION 3.12)
project(HighPerformanceAdaptiveDE VERSION 1.0.0 LANGUAGES CXX)

# 设置C++标准
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# 编译选项
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

# ✅ 修复: 跨平台编译器特定设置
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    # GCC/Clang 优化选项
    set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG")
    set(CMAKE_CXX_FLAGS_DEBUG "-g -O0 -Wall -Wextra -Wpedantic")
    
    # ✅ 修复: 条件性添加 -march=native (仅在非交叉编译时)
    if(CMAKE_BUILD_TYPE STREQUAL "Release" AND NOT CMAKE_CROSSCOMPILING)
        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -march=native -mtune=native")
        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -ffast-math -funroll-loops")
        
        # ✅ 修复: 条件性链接时优化
        if(NOT MINGW)
            set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -flto")
        endif()
    endif()
    
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    # MSVC 优化选项
    set(CMAKE_CXX_FLAGS_RELEASE "/O2 /Ob2 /Ot /Oy /GL /DNDEBUG")
    set(CMAKE_CXX_FLAGS_DEBUG "/Od /Zi /RTC1 /W4")
    
    # ✅ 修复: 条件性AVX2支持检测
    if(CMAKE_BUILD_TYPE STREQUAL "Release")
        include(CheckCXXCompilerFlag)
        check_cxx_compiler_flag("/arch:AVX2" COMPILER_SUPPORTS_AVX2)
        if(COMPILER_SUPPORTS_AVX2)
            set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /arch:AVX2")
        endif()
    endif()
endif()

# 查找依赖项
find_package(Eigen3 REQUIRED)

# ✅ 修复: 更健壮的OpenMP查找
find_package(OpenMP)
if(OpenMP_CXX_FOUND)
    message(STATUS "Found OpenMP: ${OpenMP_CXX_VERSION}")
    set(HAVE_OPENMP TRUE)
else()
    message(STATUS "OpenMP not found - parallel features will be disabled")
    set(HAVE_OPENMP FALSE)
endif()

# ✅ 修复: 可选的Intel MKL支持
find_package(MKL QUIET)
if(MKL_FOUND)
    message(STATUS "Found Intel MKL, enabling BLAS acceleration")
    set(HAVE_MKL TRUE)
    add_definitions(-DEIGEN_USE_MKL_ALL)
else()
    message(STATUS "Intel MKL not found - using default BLAS")
    set(HAVE_MKL FALSE)
endif()

# ✅ 修复: CPU特性检测
include(CheckCXXSourceCompiles)

# 检查AVX2支持
set(CMAKE_REQUIRED_FLAGS "-mavx2")
check_cxx_source_compiles("
#include <immintrin.h>
int main() {
    __m256d a = _mm256_set1_pd(1.0);
    __m256d b = _mm256_set1_pd(2.0);
    __m256d c = _mm256_add_pd(a, b);
    return 0;
}" HAVE_AVX2)

set(CMAKE_REQUIRED_FLAGS "")  # 重置

if(HAVE_AVX2)
    message(STATUS "AVX2 support detected")
else()
    message(STATUS "AVX2 support not available")
endif()

# 包含目录
include_directories(${CMAKE_CURRENT_SOURCE_DIR})

# 源文件
set(HIGH_PERFORMANCE_DE_SOURCES
    high_performance_adaptive_de.cpp
    cpp_optimizer_wrapper.cpp
)

set(HIGH_PERFORMANCE_DE_HEADERS  
    high_performance_adaptive_de.hpp
    cpp_optimizer_wrapper.hpp
)

# 创建静态库
add_library(HighPerformanceAdaptiveDE STATIC 
    ${HIGH_PERFORMANCE_DE_SOURCES} 
    ${HIGH_PERFORMANCE_DE_HEADERS}
)

# 目标属性
target_compile_features(HighPerformanceAdaptiveDE PUBLIC cxx_std_17)

# ✅ 修复: 条件性链接库
target_link_libraries(HighPerformanceAdaptiveDE 
    PUBLIC 
        Eigen3::Eigen
)

# ✅ 修复: 条件性OpenMP链接
if(OpenMP_CXX_FOUND)
    target_link_libraries(HighPerformanceAdaptiveDE PUBLIC OpenMP::OpenMP_CXX)
endif()

# ✅ 修复: 条件性MKL链接
if(MKL_FOUND)
    target_link_libraries(HighPerformanceAdaptiveDE PUBLIC ${MKL_LIBRARIES})
    target_include_directories(HighPerformanceAdaptiveDE PUBLIC ${MKL_INCLUDE_DIRS})
endif()

# ✅ 修复: 编译定义
target_compile_definitions(HighPerformanceAdaptiveDE PUBLIC
    EIGEN_USE_THREADS
    EIGEN_DONT_PARALLELIZE
    $<$<CONFIG:Debug>:EIGEN_INITIALIZE_MATRICES_BY_NAN>
)

# ✅ 修复: 条件性特性定义
if(HAVE_OPENMP)
    target_compile_definitions(HighPerformanceAdaptiveDE PUBLIC HAVE_OPENMP=1)
else()
    target_compile_definitions(HighPerformanceAdaptiveDE PUBLIC HAVE_OPENMP=0)
endif()

if(HAVE_AVX2)
    target_compile_definitions(HighPerformanceAdaptiveDE PUBLIC HAVE_AVX2=1)
    # ✅ 修复: 条件性AVX2编译选项
    if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        target_compile_options(HighPerformanceAdaptiveDE PRIVATE -mavx2)
    endif()
else()
    target_compile_definitions(HighPerformanceAdaptiveDE PUBLIC HAVE_AVX2=0)
endif()

if(HAVE_MKL)
    target_compile_definitions(HighPerformanceAdaptiveDE PUBLIC HAVE_MKL=1)
else()
    target_compile_definitions(HighPerformanceAdaptiveDE PUBLIC HAVE_MKL=0)
endif()

if(CMAKE_BUILD_TYPE STREQUAL "Release")
    target_compile_definitions(HighPerformanceAdaptiveDE PUBLIC NDEBUG)
else()
    target_compile_definitions(HighPerformanceAdaptiveDE PUBLIC DEBUG_MODE)
endif()

# 演示程序
add_executable(high_performance_demo high_performance_demo.cpp)
target_link_libraries(high_performance_demo 
    PRIVATE 
        HighPerformanceAdaptiveDE
)

# 基准测试程序
add_executable(cpp_benchmark cpp_benchmark.cpp)
target_link_libraries(cpp_benchmark 
    PRIVATE 
        HighPerformanceAdaptiveDE
)

# 单元测试程序
add_executable(cpp_unit_tests cpp_unit_tests.cpp)
target_link_libraries(cpp_unit_tests 
    PRIVATE 
        HighPerformanceAdaptiveDE
)

# ✅ 修复: 安全的安装规则
install(TARGETS HighPerformanceAdaptiveDE high_performance_demo
    EXPORT HighPerformanceAdaptiveDETargets
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
    INCLUDES DESTINATION include
)

install(FILES ${HIGH_PERFORMANCE_DE_HEADERS}
    DESTINATION include/HighPerformanceAdaptiveDE
)

install(EXPORT HighPerformanceAdaptiveDETargets
    FILE HighPerformanceAdaptiveDETargets.cmake
    NAMESPACE HighPerformanceAdaptiveDE::
    DESTINATION lib/cmake/HighPerformanceAdaptiveDE
)

# 生成配置文件
include(CMakePackageConfigHelpers)
write_basic_package_version_file(
    HighPerformanceAdaptiveDEConfigVersion.cmake
    VERSION ${PACKAGE_VERSION}
    COMPATIBILITY AnyNewerVersion
)

install(FILES 
    "${CMAKE_CURRENT_BINARY_DIR}/HighPerformanceAdaptiveDEConfigVersion.cmake"
    DESTINATION lib/cmake/HighPerformanceAdaptiveDE
)

# ✅ 修复: 更安全的性能分析工具配置
option(ENABLE_PROFILING "Enable performance profiling support" OFF)
if(ENABLE_PROFILING)
    find_program(VALGRIND_EXECUTABLE valgrind)
    if(VALGRIND_EXECUTABLE)
        message(STATUS "Found Valgrind: ${VALGRIND_EXECUTABLE}")
        add_custom_target(profile_memory
            COMMAND ${VALGRIND_EXECUTABLE} --tool=massif --stacks=yes $<TARGET_FILE:high_performance_demo>
            DEPENDS high_performance_demo
            COMMENT "Running memory profiling with Valgrind"
            WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
        )
    endif()
    
    find_program(PERF_EXECUTABLE perf)
    if(PERF_EXECUTABLE AND NOT WIN32)
        message(STATUS "Found perf: ${PERF_EXECUTABLE}")
        add_custom_target(profile_cpu
            COMMAND ${PERF_EXECUTABLE} record -g $<TARGET_FILE:high_performance_demo>
            DEPENDS high_performance_demo
            COMMENT "Running CPU profiling with perf"
            WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
        )
    endif()
endif()

# ✅ 修复: 条件性代码覆盖率支持
option(ENABLE_COVERAGE "Enable code coverage analysis" OFF)
if(ENABLE_COVERAGE AND CMAKE_BUILD_TYPE STREQUAL "Debug")
    if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        target_compile_options(HighPerformanceAdaptiveDE PUBLIC --coverage)
        target_link_options(HighPerformanceAdaptiveDE PUBLIC --coverage)
        
        find_program(LCOV_EXECUTABLE lcov)
        if(LCOV_EXECUTABLE)
            add_custom_target(coverage
                COMMAND ${LCOV_EXECUTABLE} --directory . --capture --output-file coverage.info
                COMMAND ${LCOV_EXECUTABLE} --remove coverage.info '/usr/*' --output-file coverage.info
                COMMAND ${LCOV_EXECUTABLE} --list coverage.info
                COMMENT "Generating code coverage report"
                WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
            )
        endif()
    else()
        message(WARNING "Code coverage is only supported with GCC")
    endif()
endif()

# 创建配置头文件
configure_file(
    "${CMAKE_CURRENT_SOURCE_DIR}/config.hpp.in"
    "${CMAKE_CURRENT_BINARY_DIR}/config.hpp"
    @ONLY
)

target_include_directories(HighPerformanceAdaptiveDE PUBLIC 
    $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
    $<INSTALL_INTERFACE:include>
)

# 实用目标
add_custom_target(format
    COMMAND find ${CMAKE_CURRENT_SOURCE_DIR} -name "*.cpp" -o -name "*.hpp" | xargs clang-format -i
    COMMENT "Formatting source code"
)

add_custom_target(check
    COMMAND cppcheck --enable=all --std=c++17 --suppress=missingIncludeSystem ${CMAKE_CURRENT_SOURCE_DIR}
    COMMENT "Running static analysis"
)

# 打印构建信息
message(STATUS "============================================")
message(STATUS "High Performance Adaptive DE Build Info")
message(STATUS "============================================")
message(STATUS "Build Type: ${CMAKE_BUILD_TYPE}")
message(STATUS "C++ Standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "Compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}")
message(STATUS "Eigen Version: ${Eigen3_VERSION}")
message(STATUS "OpenMP: ${HAVE_OPENMP}")
message(STATUS "AVX2 Support: ${HAVE_AVX2}")
message(STATUS "Intel MKL: ${HAVE_MKL}")
message(STATUS "Cross Compiling: ${CMAKE_CROSSCOMPILING}")
message(STATUS "Install Prefix: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "============================================")
