cmake_minimum_required(VERSION 3.12)
project(HighPerformanceAdaptiveDE VERSION 1.0.0 LANGUAGES CXX)

# 设置C++标准
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# 编译选项
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

# 编译器特定设置
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    # GCC/Clang 优化选项
    set(CMAKE_CXX_FLAGS_RELEASE "-O3 -march=native -mtune=native -DNDEBUG")
    set(CMAKE_CXX_FLAGS_DEBUG "-g -O0 -Wall -Wextra -Wpedantic")
    
    # 启用更多优化
    if(CMAKE_BUILD_TYPE STREQUAL "Release")
        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -ffast-math -funroll-loops")
        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -flto -fuse-linker-plugin")
    endif()
    
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    # MSVC 优化选项
    set(CMAKE_CXX_FLAGS_RELEASE "/O2 /Ob2 /Ot /Oy /GL /DNDEBUG")
    set(CMAKE_CXX_FLAGS_DEBUG "/Od /Zi /RTC1")
    
    # 启用AVX2支持
    if(CMAKE_BUILD_TYPE STREQUAL "Release")
        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /arch:AVX2")
    endif()
endif()

# 查找依赖项
find_package(Eigen3 REQUIRED)
find_package(OpenMP REQUIRED)

# 可选：查找Intel MKL (如果可用)
find_package(MKL QUIET)
if(MKL_FOUND)
    message(STATUS "Found Intel MKL, enabling BLAS acceleration")
    add_definitions(-DEIGEN_USE_MKL_ALL)
endif()

# 包含目录
include_directories(${CMAKE_CURRENT_SOURCE_DIR})

# 源文件
set(HIGH_PERFORMANCE_DE_SOURCES
    high_performance_adaptive_de.cpp
    cpp_optimizer_wrapper.cpp
)

set(HIGH_PERFORMANCE_DE_HEADERS  
    high_performance_adaptive_de.hpp
    cpp_optimizer_wrapper.hpp
)

# 创建静态库
add_library(HighPerformanceAdaptiveDE STATIC 
    ${HIGH_PERFORMANCE_DE_SOURCES} 
    ${HIGH_PERFORMANCE_DE_HEADERS}
)

# 目标属性
target_compile_features(HighPerformanceAdaptiveDE PUBLIC cxx_std_17)

# 链接库
target_link_libraries(HighPerformanceAdaptiveDE 
    PUBLIC 
        Eigen3::Eigen
        OpenMP::OpenMP_CXX
)

if(MKL_FOUND)
    target_link_libraries(HighPerformanceAdaptiveDE PUBLIC ${MKL_LIBRARIES})
    target_include_directories(HighPerformanceAdaptiveDE PUBLIC ${MKL_INCLUDE_DIRS})
endif()

# 编译定义
target_compile_definitions(HighPerformanceAdaptiveDE PUBLIC
    EIGEN_USE_THREADS
    EIGEN_DONT_PARALLELIZE
    EIGEN_NO_DEBUG
)

if(CMAKE_BUILD_TYPE STREQUAL "Release")
    target_compile_definitions(HighPerformanceAdaptiveDE PUBLIC NDEBUG)
else()
    target_compile_definitions(HighPerformanceAdaptiveDE PUBLIC 
        EIGEN_INITIALIZE_MATRICES_BY_NAN
        DEBUG_MODE
    )
endif()

# 演示程序
add_executable(high_performance_demo high_performance_demo.cpp)
target_link_libraries(high_performance_demo 
    PRIVATE 
        HighPerformanceAdaptiveDE
)

# 基准测试程序
add_executable(cpp_benchmark 
    ${CMAKE_CURRENT_SOURCE_DIR}/cpp_benchmark.cpp
)
target_link_libraries(cpp_benchmark 
    PRIVATE 
        HighPerformanceAdaptiveDE
)

# 单元测试程序
add_executable(cpp_unit_tests 
    ${CMAKE_CURRENT_SOURCE_DIR}/cpp_unit_tests.cpp
)
target_link_libraries(cpp_unit_tests 
    PRIVATE 
        HighPerformanceAdaptiveDE
)

# 安装规则
install(TARGETS HighPerformanceAdaptiveDE high_performance_demo
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
)

install(FILES ${HIGH_PERFORMANCE_DE_HEADERS}
    DESTINATION include/HighPerformanceAdaptiveDE
)

# 性能分析工具 (可选)
option(ENABLE_PROFILING "Enable performance profiling support" OFF)
if(ENABLE_PROFILING)
    find_program(VALGRIND_EXECUTABLE valgrind)
    find_program(PERF_EXECUTABLE perf)
    
    if(VALGRIND_EXECUTABLE)
        message(STATUS "Found Valgrind: ${VALGRIND_EXECUTABLE}")
        add_custom_target(profile_memory
            COMMAND ${VALGRIND_EXECUTABLE} --tool=massif --stacks=yes ./high_performance_demo
            DEPENDS high_performance_demo
            COMMENT "Running memory profiling with Valgrind"
        )
    endif()
    
    if(PERF_EXECUTABLE)
        message(STATUS "Found perf: ${PERF_EXECUTABLE}")
        add_custom_target(profile_cpu
            COMMAND ${PERF_EXECUTABLE} record -g ./high_performance_demo
            DEPENDS high_performance_demo
            COMMENT "Running CPU profiling with perf"
        )
    endif()
endif()

# 代码覆盖率 (Debug模式)
option(ENABLE_COVERAGE "Enable code coverage analysis" OFF)
if(ENABLE_COVERAGE AND CMAKE_BUILD_TYPE STREQUAL "Debug")
    if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        target_compile_options(HighPerformanceAdaptiveDE PUBLIC --coverage)
        target_link_options(HighPerformanceAdaptiveDE PUBLIC --coverage)
        
        find_program(GCOV_EXECUTABLE gcov)
        find_program(LCOV_EXECUTABLE lcov)
        
        if(GCOV_EXECUTABLE AND LCOV_EXECUTABLE)
            add_custom_target(coverage
                COMMAND ${LCOV_EXECUTABLE} --directory . --capture --output-file coverage.info
                COMMAND ${LCOV_EXECUTABLE} --remove coverage.info '/usr/*' --output-file coverage.info
                COMMAND ${LCOV_EXECUTABLE} --list coverage.info
                COMMENT "Generating code coverage report"
            )
        endif()
    endif()
endif()

# 文档生成 (可选)
option(BUILD_DOCUMENTATION "Build API documentation with Doxygen" OFF)
if(BUILD_DOCUMENTATION)
    find_package(Doxygen)
    if(DOXYGEN_FOUND)
        configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in 
                       ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
        add_custom_target(docs
            ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
            COMMENT "Generating API documentation with Doxygen"
        )
    endif()
endif()

# 打包支持
set(CPACK_PACKAGE_NAME "HighPerformanceAdaptiveDE")
set(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_PATCH})
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "High Performance Adaptive Differential Evolution Library")
set(CPACK_PACKAGE_VENDOR "AI Algorithm Team")
set(CPACK_PACKAGE_CONTACT "team@example.com")

include(CPack)

# 打印构建信息
message(STATUS "============================================")
message(STATUS "High Performance Adaptive DE Build Info")
message(STATUS "============================================")
message(STATUS "Build Type: ${CMAKE_BUILD_TYPE}")
message(STATUS "C++ Standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "Compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}")
message(STATUS "Eigen Version: ${Eigen3_VERSION}")
message(STATUS "OpenMP: ${OpenMP_FOUND}")
message(STATUS "Intel MKL: ${MKL_FOUND}")
message(STATUS "Install Prefix: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "============================================")

# 创建配置头文件
configure_file(
    "${CMAKE_CURRENT_SOURCE_DIR}/config.hpp.in"
    "${CMAKE_CURRENT_BINARY_DIR}/config.hpp"
    @ONLY
)

target_include_directories(HighPerformanceAdaptiveDE PUBLIC 
    $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
    $<INSTALL_INTERFACE:include>
)

# 添加自定义目标
add_custom_target(format
    COMMAND clang-format -i ${HIGH_PERFORMANCE_DE_SOURCES} ${HIGH_PERFORMANCE_DE_HEADERS}
    COMMENT "Formatting source code"
)

add_custom_target(check
    COMMAND cppcheck --enable=all --std=c++17 ${CMAKE_CURRENT_SOURCE_DIR}
    COMMENT "Running static analysis"
)

# 性能测试目标
add_custom_target(performance_test
    COMMAND ${CMAKE_CURRENT_BINARY_DIR}/high_performance_demo
    DEPENDS high_performance_demo
    COMMENT "Running performance demonstration"
)

add_custom_target(benchmark_test
    COMMAND ${CMAKE_CURRENT_BINARY_DIR}/cpp_benchmark
    DEPENDS cpp_benchmark  
    COMMENT "Running benchmark tests"
)

# 示例用法帮助
add_custom_target(help_usage
    COMMAND echo "Available targets:"
    COMMAND echo "  all                 - Build everything"
    COMMAND echo "  high_performance_demo - Build and run demonstration"
    COMMAND echo "  cpp_benchmark       - Build benchmark tests"  
    COMMAND echo "  performance_test    - Run performance test"
    COMMAND echo "  benchmark_test      - Run benchmark comparison"
    COMMAND echo "  format             - Format source code"
    COMMAND echo "  check              - Run static analysis"
    COMMAND echo "  install            - Install library and headers"
    COMMENT "Available build targets"
)
